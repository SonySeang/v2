// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  like        like[]
}

//one to many
model Category {
  id          String      @id @default(cuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  communities Community[]
}

model Community {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  posts      Post[]
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedpassword String
  role           String?
  posts          Post[]
  community      Community[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  like      like[]
}

model like {
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("likes")
}
